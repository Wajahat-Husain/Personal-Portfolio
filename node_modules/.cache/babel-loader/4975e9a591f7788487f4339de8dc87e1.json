{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nconst Particle_1 = require(\"./Particle\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst InteractionManager_1 = require(\"./InteractionManager\");\n\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nclass Particles {\n  constructor(container) {\n    this.container = container;\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    const canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n  }\n\n  get count() {\n    return this.array.length;\n  }\n\n  init() {\n    var _a;\n\n    const container = this.container;\n    const options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    let handled = false;\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    this.addManualParticles();\n\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n\n        for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n\n    container.pathGenerator.init();\n  }\n\n  redraw() {\n    this.clear();\n    this.init();\n    this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n\n  removeAt(index, quantity = 1, group, override) {\n    if (!(index >= 0 && index <= this.count)) {\n      return;\n    }\n\n    let deleted = 0;\n\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      const particle = this.array[i];\n\n      if (!particle || particle.group !== group) {\n        continue;\n      }\n\n      particle.destroy(override);\n      this.array.splice(i--, 1);\n      const zIdx = this.zArray.indexOf(particle);\n      this.zArray.splice(zIdx, 1);\n      deleted++;\n    }\n  }\n\n  remove(particle, group, override) {\n    this.removeAt(this.array.indexOf(particle), undefined, group, override);\n  }\n\n  update(delta) {\n    const container = this.container;\n    const particlesToDelete = [];\n    container.pathGenerator.update();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.update !== undefined) {\n        plugin.update(delta);\n      }\n    }\n\n    for (const particle of this.array) {\n      const resizeFactor = this.container.canvas.resizeFactor;\n\n      if (resizeFactor) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n      }\n\n      for (const [, plugin] of this.container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n\n      particle.move(delta);\n\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n\n      this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n    }\n\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n\n    this.interactionManager.externalInteract(delta);\n\n    for (const particle of this.container.particles.array) {\n      particle.update(delta);\n\n      if (!particle.destroyed && !particle.spawning) {\n        this.interactionManager.particlesInteract(particle, delta);\n      }\n    }\n\n    delete container.canvas.resizeFactor;\n  }\n\n  draw(delta) {\n    const container = this.container;\n    container.canvas.clear();\n    const canvasSize = this.container.canvas.size;\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.update(delta);\n\n    if (this.needsSort) {\n      this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n\n    for (const p of this.zArray) {\n      p.draw(delta);\n    }\n  }\n\n  clear() {\n    this.array = [];\n    this.zArray = [];\n  }\n\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n    }\n\n    this.pushing = false;\n  }\n\n  addParticle(position, overrideOptions, group) {\n    const container = this.container;\n    const options = container.actualOptions;\n    const limit = options.particles.number.limit * container.density;\n\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    return this.pushParticle(position, overrideOptions, group);\n  }\n\n  addSplitParticle(parent) {\n    const splitOptions = parent.options.destroy.split;\n    const options = new ParticlesOptions_1.ParticlesOptions();\n    options.load(parent.options);\n    const factor = Utils_1.getRangeValue(splitOptions.factor.value);\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n\n    if (typeof options.size.value === \"number\") {\n      options.size.value /= factor;\n    } else {\n      options.size.value.min /= factor;\n      options.size.value.max /= factor;\n    }\n\n    options.load(splitOptions.particles);\n    const offset = splitOptions.sizeOffset ? Utils_1.setRangeValue(-parent.size.value, parent.size.value) : 0;\n    const position = {\n      x: parent.position.x + Utils_1.randomInRange(offset),\n      y: parent.position.y + Utils_1.randomInRange(offset)\n    };\n    return this.pushParticle(position, options, parent.group, particle => {\n      if (particle.size.value < 0.5) {\n        return false;\n      }\n\n      particle.velocity.length = Utils_1.randomInRange(Utils_1.setRangeValue(parent.velocity.length, particle.velocity.length));\n      particle.splitCount = parent.splitCount + 1;\n      particle.unbreakable = true;\n      setTimeout(() => {\n        particle.unbreakable = false;\n      }, 500);\n      return true;\n    });\n  }\n\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n\n  getLinkFrequency(p1, p2) {\n    const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n    let res = this.linksFreq.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.linksFreq.set(key, res);\n    }\n\n    return res;\n  }\n\n  getTriangleFrequency(p1, p2, p3) {\n    let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n\n    if (id1 > id2) {\n      [id2, id1] = [id1, id2];\n    }\n\n    if (id2 > id3) {\n      [id3, id2] = [id2, id3];\n    }\n\n    if (id1 > id3) {\n      [id3, id1] = [id1, id3];\n    }\n\n    const key = `${id1}_${id2}_${id3}`;\n    let res = this.trianglesFreq.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.trianglesFreq.set(key, res);\n    }\n\n    return res;\n  }\n\n  addManualParticles() {\n    const container = this.container;\n    const options = container.actualOptions;\n\n    for (const particle of options.manualParticles) {\n      const pos = particle.position ? {\n        x: particle.position.x * container.canvas.size.width / 100,\n        y: particle.position.y * container.canvas.size.height / 100\n      } : undefined;\n      this.addParticle(pos, particle.options);\n    }\n  }\n\n  setDensity() {\n    const options = this.container.actualOptions;\n\n    for (const group in options.particles.groups) {\n      this.applyDensity(options.particles.groups[group], 0, group);\n    }\n\n    this.applyDensity(options.particles, options.manualParticles.length);\n  }\n\n  applyDensity(options, manualCount, group) {\n    var _a;\n\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n\n    const numberOptions = options.number;\n    const densityFactor = this.initDensityFactor(numberOptions.density);\n    const optParticlesNumber = numberOptions.value;\n    const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n    const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n    const particlesCount = Math.min(this.count, this.array.filter(t => t.group === group).length);\n    this.limit = numberOptions.limit * densityFactor;\n\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber, group);\n    }\n  }\n\n  initDensityFactor(densityOptions) {\n    const container = this.container;\n\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n\n    const canvas = container.canvas.element;\n    const pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n  }\n\n  pushParticle(position, overrideOptions, group, initializer) {\n    try {\n      const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\n      let canAdd = true;\n\n      if (initializer) {\n        canAdd = initializer(particle);\n      }\n\n      if (!canAdd) {\n        return;\n      }\n\n      this.array.push(particle);\n      this.zArray.push(particle);\n      this.nextId++;\n      return particle;\n    } catch (e) {\n      console.warn(`error adding particle: ${e}`);\n      return;\n    }\n  }\n\n}\n\nexports.Particles = Particles;","map":{"version":3,"sources":["D:/GITHUB REPOS/Portfolio/node_modules/tsparticles/Core/Particles.js"],"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","ParticlesOptions_1","constructor","container","nextId","array","zArray","limit","needsSort","lastZIndex","linksFreq","Map","trianglesFreq","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","count","length","init","_a","options","actualOptions","handled","plugin","plugins","particlesInitialization","undefined","addManualParticles","group","particles","groups","groupOptions","i","j","number","addParticle","pathGenerator","redraw","clear","draw","factor","removeAt","index","quantity","override","deleted","particle","destroy","splice","zIdx","indexOf","remove","update","delta","particlesToDelete","resizeFactor","position","x","y","destroyed","particleUpdate","move","push","insert","Point","getPosition","externalInteract","spawning","particlesInteract","sort","a","b","z","id","drawPlugin","p","nb","mouse","overrideOptions","pushing","density","countToRemove","removeQuantity","pushParticle","addSplitParticle","parent","splitOptions","split","ParticlesOptions","load","getRangeValue","color","hsl","getFillColor","min","max","offset","sizeOffset","setRangeValue","randomInRange","velocity","splitCount","unbreakable","setTimeout","getLinkFrequency","p1","p2","key","Math","res","get","random","set","getTriangleFrequency","p3","id1","id2","id3","manualParticles","pos","setDensity","applyDensity","manualCount","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","pow","area","initializer","Particle","canAdd","e","console","warn"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./InteractionManager\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nclass Particles {\n    constructor(container) {\n        this.container = container;\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.linksFreq = new Map();\n        this.trianglesFreq = new Map();\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        var _a;\n        const container = this.container;\n        const options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        this.linksFreq = new Map();\n        this.trianglesFreq = new Map();\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        container.pathGenerator.init();\n    }\n    redraw() {\n        this.clear();\n        this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (!(index >= 0 && index <= this.count)) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            deleted++;\n        }\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update !== undefined) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = this.container.canvas.resizeFactor;\n            if (resizeFactor) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            particle.move(delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        this.interactionManager.externalInteract(delta);\n        for (const particle of this.container.particles.array) {\n            particle.update(delta);\n            if (!particle.destroyed && !particle.spawning) {\n                this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions, group) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const limit = options.particles.number.limit * container.density;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this.pushParticle(position, overrideOptions, group);\n    }\n    addSplitParticle(parent) {\n        const splitOptions = parent.options.destroy.split;\n        const options = new ParticlesOptions_1.ParticlesOptions();\n        options.load(parent.options);\n        const factor = Utils_1.getRangeValue(splitOptions.factor.value);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitOptions.particles);\n        const offset = splitOptions.sizeOffset ? Utils_1.setRangeValue(-parent.size.value, parent.size.value) : 0;\n        const position = {\n            x: parent.position.x + Utils_1.randomInRange(offset),\n            y: parent.position.y + Utils_1.randomInRange(offset),\n        };\n        return this.pushParticle(position, options, parent.group, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = Utils_1.randomInRange(Utils_1.setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    getLinkFrequency(p1, p2) {\n        const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n        let res = this.linksFreq.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.linksFreq.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.trianglesFreq.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.trianglesFreq.set(key, res);\n        }\n        return res;\n    }\n    addManualParticles() {\n        const container = this.container;\n        const options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            const pos = particle.position\n                ? {\n                    x: (particle.position.x * container.canvas.size.width) / 100,\n                    y: (particle.position.y * container.canvas.size.height) / 100,\n                }\n                : undefined;\n            this.addParticle(pos, particle.options);\n        }\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this.applyDensity(options.particles.groups[group], 0, group);\n        }\n        this.applyDensity(options.particles, options.manualParticles.length);\n    }\n    applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number;\n        const densityFactor = this.initDensityFactor(numberOptions.density);\n        const optParticlesNumber = numberOptions.value;\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n        const particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element;\n        const pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\nexports.Particles = Particles;\n"]},"metadata":{},"sourceType":"script"}